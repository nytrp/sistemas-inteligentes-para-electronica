# -*- coding: utf-8 -*-
"""activida_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_lqJIf8y_umNtUR09L3SEpP6F-YKRy1K

# Actividad 2 – Suavizado de datos

## 1) generación de datos
"""

import numpy as np
import matplotlib.pyplot as plt

# Datos de ejemplo (puedes reemplazarlos por los tuyos)
datos = [10, 12, 15, 20, 18, 16, 14, 13, 15, 19, 21, 20, 18, 17, 22, 25, 23]
datos = np.array(datos, dtype=float)
len(datos)

"""## 2) Promedio móvil

Calcula la media de una ventana deslizante sobre los datos. Suaviza las variaciones locales.

"""

# Promedio móvil usando convolución (modo 'valid' para no usar padding)
def promedio_movil(x, ventana=3):
    x = np.asarray(x, dtype=float)
    assert ventana >= 1 and isinstance(ventana, int)
    kernel = np.ones(ventana) / ventana
    return np.convolve(x, kernel, mode='valid')

pm_3 = promedio_movil(datos, ventana=3)
pm_5 = promedio_movil(datos, ventana=5)
pm_3, pm_5

"""## 3) Filtro de mediana

Sustituye cada valor por la mediana de su vecindario. Útil para eliminar picos bruscos.

"""

# Filtro de mediana sin dependencias adicionales
def filtro_mediana(x, ventana=3):
    x = np.asarray(x, dtype=float)
    assert ventana >= 1 and isinstance(ventana, int)
    n = len(x)
    res = []
    for i in range(n - ventana + 1):
        vec = x[i:i+ventana]
        res.append(np.median(vec))
    return np.array(res)

med_3 = filtro_mediana(datos, ventana=3)
med_5 = filtro_mediana(datos, ventana=5)
med_3, med_5

"""## 4) Suavizado exponencial

Aplica un promedio ponderado donde los valores recientes tienen mayor peso.

"""

def suavizado_exponencial(x, alpha=0.3):
    x = np.asarray(x, dtype=float)
    assert 0 < alpha <= 1
    s = np.empty_like(x)
    s[0] = x[0]
    for i in range(1, len(x)):
        s[i] = alpha * x[i] + (1 - alpha) * s[i-1]
    return s

se_03 = suavizado_exponencial(datos, alpha=0.3)
se_07 = suavizado_exponencial(datos, alpha=0.7)
se_03[:5], se_07[:5]